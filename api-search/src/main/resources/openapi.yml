openapi: 3.0.0
servers:
  - url: 'https://sciapps.colorado.edu/onestop/api'
    description: Development test server (uses test data)
  - url: 'https://data.noaa.gov/onestop/api/search'
    description: NOAA OneStop
info:
  title: OneStop Search API
  description: Search Collections and Granules! More information on search request and responses available at [Search API Requests](https://github.com/cedardevs/onestop/wiki/OneStop-Search-API-Requests) and [Search API Responses](https://github.com/cedardevs/onestop/wiki/OneStop-Search-API-Responses).
  version: 2.0.0
tags:
  - name: collection
    description: Discover available collections of data.
  - name: granule
    description: Discover available files of data.
  - name: flattened-granule
    description: 'Discover available files of data, flattened with collection data.'
paths:
  /collection:
    head:
      tags:
        - collection
      summary: Get Collection Info
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - collection
      summary: Get Collection Info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/infoResponse'
  '/collection/{id}':
    head:
      tags:
        - collection
      summary: Collection by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the collection
      responses:
        '200':
          description: Successful operation
        '404':
          description: Request Parsing Error
    get:
      tags:
        - collection
      summary: Collection by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the collection
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fullCollectionResponse'
        '404':
          description: Request Parsing Error
  /search/collection:
    post:
      tags:
        - collection
      summary: Retrieve collection metadata
      description: 'Retrietve collection metadata records matching the text query string, spatial, and/or temporal filter.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestBody'
            examples:
              payload0:
                $ref: '#/components/examples/payload0'
              payload1:
                $ref: '#/components/examples/payload1'
              payload2:
                $ref: '#/components/examples/payload2'
              payload3:
                $ref: '#/components/examples/payload3'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
        '400':
          description: Bad Request
  /granule:
    head:
      tags:
        - granule
      summary: Get Granule Info
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - granule
      summary: Get Granule Info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/infoResponse'
  '/granule/{id}':
    head:
      tags:
        - granule
      summary: Granule by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the granule
      responses:
        '200':
          description: Successful operation
        '404':
          description: Request Parsing Error
    get:
      tags:
        - granule
      summary: Granule by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the granule
      responses:
        '200':
          description: Successful operation
        '404':
          description: Request Parsing Error
  /search/granule:
    post:
      tags:
        - granule
      summary: Retrieve granule metadata
      description: 'Retrietve granule metadata records matching the text query string, spatial, and/or temporal filter.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
        '400':
          description: Bad Request
  /flattened-granule:
    head:
      tags:
        - flattened-granule
      summary: Get Flattened Granule Info
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - flattened-granule
      summary: Get Flattened Granule Info
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/infoResponse'
  '/flattened-granule/{id}':
    head:
      tags:
        - flattened-granule
      summary: Flattened Granule by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the flattened granule
      responses:
        '200':
          description: Successful operation
        '404':
          description: Request Parsing Error
    get:
      tags:
        - flattened-granule
      summary: Flattened Granule by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: UUID of the flattened granule
      responses:
        '200':
          description: Successful operation
        '404':
          description: Request Parsing Error
  /search/flattened-granule:
    post:
      tags:
        - flattened-granule
      summary: Retrieve flattened granule metadata
      description: 'Retrietve flattened granule metadata records matching the text query string, spatial, and/or temporal filter.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
        '400':
          description: Bad Request
components:
  schemas:
    infoResponse:
      description: High-level information on a resource.
      type: object
      additionalProperties: false
      properties:
        data:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              type:
                type: string
                enum:
                  - count
              id:
                type: string
                enum:
                  - collection
                  - granule
              count:
                type: integer
    fullCollectionResponse:
      description: Collection
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/collectionMetadataObject'
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/collectionDataObject'
    collectionMetadataObject:
      type: object
      properties:
        totalGranules:
          type: integer
    collectionDataObject:
      type: object
      properties:
        type:
          type: string
          enum:
            - collection
        id:
          type: string
    searchResponse:
      description: Search Results
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/searchMetadataObject'
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/searchDataObject'
    searchMetadataObject:
      type: object
      properties:
        took:
          type: integer
        total:
          description: total number of results matching the search
          type: integer
        facets:
          description: 'included if search request specified facets:true'
          type: object
    searchDataObject:
      type: object
      properties:
        type:
          type: string
          enum:
            - collection
            - granule
            - flattened-granule
        id:
          description: internal uuid
          type: string
        attributes:
          description: 'Summary of the result. If search specified summary:false, this could be the entire result instead.'
          type: object
          properties:
            title:
              type: string
            thumbnail:
              type: string
              format: uri
            beginYear:
              type: string
              format: date
            endYear:
              type: string
              format: date
            spatialBounding:
              $ref: '#/components/schemas/Geometry'
            links:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/link'
    link:
      type: object
      properties:
        linkProtocol:
          type: string
        linkFunction:
          type: string
        linkDescription:
          type: string
        linkUrl:
          type: string
          format: uri
        linkName:
          type: string
    requestBody:
      description: The shape of a search request body that can be sent to the OneStop API to execute a search against available metadata.
      type: object
      additionalProperties: false
      properties:
        queries:
          description: List of queries to search against.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/textQuery'
        filters:
          description: filters applied to the search
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/dateTimeFilter'
              - $ref: '#/components/schemas/facetFilter'
              - $ref: '#/components/schemas/geometryFilter'
              - $ref: '#/components/schemas/excludeGlobalFilter'
              - $ref: '#/components/schemas/collectionFilter'
        facets:
          description: Flag to request counts of results by GCMD keywords in addition to results.
          type: boolean
          default: false
        summary:
          description: Flag to request summary of search results instead of full set of attributes.
          type: boolean
          default: true
        page:
          $ref: '#/components/schemas/page'
    page:
      description: Pagination of results
      example: {"max":20,"offset":0}
      type: object
      properties:
        max:
          description: 'Maximum number of results returned. If the page object is not provided, this defaults to 10.'
          type: integer
        offset:
          description: 'Number of records by which to offset results. If the page object is not provided, this defaults to 0.'
          type: integer
      required:
        - max
        - offset
      additionalProperties: false
    textQuery:
      type: object
      description: Text query to search with that is valid so long as it does not have a leading wildcard ('*' or '?')
      example: {"type":"queryText","value":"climate"}
      properties:
        type:
          type: string
          enum:
            - queryText
        value:
          type: string
          pattern: '^(?!\s*[\*\?]+).*'
      required:
        - type
        - value
      additionalProperties: false
    excludeGlobalFilter:
      description: Flag to request that geospatially global results be excluded. Defaults to false if not provided.
      type: object
      example: {"type":"excludeGlobal","value":true}
      properties:
        type:
          type: string
          enum:
            - excludeGlobal
        value:
          type: boolean
          default: false
      required:
        - type
        - value
      additionalProperties: false
    dateTimeFilter:
      description: 'Open-ended time ranges are allowed. Include either before, after, or both.'
      type: object
      properties:
        type:
          type: string
          enum:
            - datetime
        before:
          type: string
          format: date-time
          example: '2017-01-01T00:00:00Z'
        after:
          type: string
          format: date-time
          example: '2010-01-01T00:00:00Z'
      required:
        - type
      additionalProperties: false
    facetFilter:
      description: Filters results based on given GCMD keywords where returned results MUST have the specified keyword. Multiple facetFilter objects will be combined with logical AND; multiple values in a single facetFilter object will be combined with the logical OR.
      type: object
      properties:
        type:
          type: string
          enum:
            - facet
        name:
          description: 'One of the GCMD keyword categories: science, services, locations, instruments, platforms, projects, dataCenters, horizontalResolution, verticalResolution, temporalResolution.'
          type: string
          enum:
            - science
            - services
            - locations
            - instruments
            - platforms
            - projects
            - dataCenters
            - horizontalResolution
            - verticalResolution
            - temporalResolution
        values:
          description: Exact match GCMD keyword(s)
          type: array
          items:
            type: string
            example: Atmosphere > Atmospheric Temperature > Surface Temperature
      required:
        - type
        - name
        - values
      additionalProperties: false
    geometryFilter:
      description: Filter that returns results whose bounding geometry contains the specified geographical coordinate.
      type: object
      properties:
        type:
          type: string
          enum:
            - geometry
        geometry:
          $ref: '#/components/schemas/Geometry'
        relation:
          description: 'How the dataset geometry relates to the given geometry, e.g., return all datasets whose geometry contains the given point.'
          type: string
          default: intersects
          enum:
            - contains
            - disjoint
            - intersects
            - within
      required:
        - type
        - geometry
      additionalProperties: false
    collectionFilter:
      description: 'Collections to filter results by (logical OR if multiple filters or multiple values in one filter). Only impacts granule searches.'
      type: object
      properties:
        type:
          type: string
          enum:
            - collection
        values:
          description: List of collection internal ids
          type: array
          items:
            type: string
      required:
        - type
        - values
      additionalProperties: false
    Geometry:
      description: 'One geometry as defined by GeoJSON.  CAUTION: this model was converted from GeoJSON. If in doubt, refer to the GeoJSON spec.'
      example: {"type":"Polygon","coordinates":[[[-128.144531,19.273176],[-58.471856,19.273176],[-58.471856,47.584291],[-128.144531,47.584291],[-128.144531,19.273176]]]}
      oneOf:
        - $ref: '#/components/schemas/Polygon'
        - $ref: '#/components/schemas/Point'
        - $ref: '#/components/schemas/MultiPoint'
        - $ref: '#/components/schemas/LineString'
        - $ref: '#/components/schemas/MultiLineString'
        - $ref: '#/components/schemas/MultiPolygon'
    Point:
      type: object
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: '#/components/schemas/position'
      required:
        - type
        - coordinates
    MultiPoint:
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          $ref: '#/components/schemas/positionArray'
      required:
        - type
        - coordinates
    LineString:
      properties:
        type:
          enum:
            - LineString
        coordinates:
          $ref: '#/components/schemas/lineString'
      required:
        - type
        - coordinates
    MultiLineString:
      properties:
        type:
          enum:
            - MultiLineString
        coordinates:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/lineString'
      required:
        - type
        - coordinates
    Polygon:
      type: object
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          $ref: '#/components/schemas/polygon'
      required:
        - type
        - coordinates
    MultiPolygon:
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/polygon'
      required:
        - type
        - coordinates
    lat:
      description: a coordinate value
      type: number
      minimum: -360
      maximum: 360
    long:
      description: a coordinate value
      type: number
      minimum: -90
      maximum: 90
    position:
      description: 'A single position. The first two elements are longitude and latitude.'
      type: array
      minItems: 2
      maxItems: 2
      items:
        oneOf:
          - $ref: '#/components/schemas/lat'
          - $ref: '#/components/schemas/long'
    positionArray:
      description: An array of positions
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/position'
    lineString:
      description: An array of two or more positions
      allOf:
        - $ref: '#/components/schemas/positionArray'
        - minItems: 2
    linearRing:
      description: An array of four positions where the first equals the last
      allOf:
        - $ref: '#/components/schemas/positionArray'
        - minItems: 4
    polygon:
      description: An array of linear rings
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/linearRing'
  examples:
    scienceFacet:
      value: {"type":"facet","name":"science","values":["Agriculture","Atmosphere > Atmospheric Radiation > Incoming Solar Radiation"]}
      summary: '''Incoming Solar Radiation'' science theme'
    instrumentFacet:
      value: {"type":"facet","name":"instruments","values":["ADCP > Acoustic Doppler Current Profiler"]}
      summary: '''Acoustic Doppler Current Profiler'' instrument'
    platformFacet:
      value: {"type":"facet","name":"platforms","values":["Ships"]}
      summary: '''Ships'' platform'
    projectFacet:
      value: {"type":"facet","name":"projects","values":["U.S.GLOBEC-SO > U.S. Global Ocean Ecosystem Dynamics, Southern Ocean"]}
      summary: '''U.S. Global Ocean Ecosystem Dynamics, Southern Ocean'' project'
    dataCenterFacet:
      value: {"type":"facet","name":"dataCenters","values":["DOC/NOAA/NMFS/AFSC > Alaska Fisheries Science Center, National Marine Fisheries Service, NOAA, U.S. Department of Commerce"]}
      summary: Alaska Fisheries Science Center
    scienceOrFacet:
      value: {"type":"facet","name":"science","values":["Agriculture","Atmosphere > Atmospheric Radiation > Incoming Solar Radiation"]}
      summary: '''Agriculture'' OR ''Incoming Solar Radiation'''
    categoriesAndFacet:
      value: [{"type":"facet","name":"science","values":["Agriculture"]},{"type":"facet","name":"instruments","values":["ADCP > Acoustic Doppler Current Profiler"]}]
      summary: 'array of multiple facets: ''Agriculture'' AND ''Acoustic Doppler Current Profiler'''
    payload0:
      value: {"queries":[{"type":"queryText","value":"climate"}],"filters":[],"facets":true,"page":{"max":20,"offset":0}}
      summary: basic text query
    payload1:
      value: {"queries":[{"type":"queryText","value":"weather"}],"filters":[{"type":"facet","name":"science","values":["Agriculture","Atmosphere > Atmospheric Radiation > Incoming Solar Radiation"]}],"facets":true,"page":{"max":20,"offset":0}}
      summary: multiple science theme filters selected
    payload2:
      value: {"queries":[{"type":"queryText","value":"weather"}],"filters":[{"type":"facet","name":"science","values":["Agriculture"]},{"type":"facet","name":"instruments","values":["ADCP > Acoustic Doppler Current Profiler"]}],"facets":true,"page":{"max":20,"offset":0}}
      summary: multiple facets selected
    payload3:
      value: {"queries":[{"type":"queryText","value":"weather"}],"filters":[],"facets":false,"page":{"max":20,"offset":20}}
      summary: Next Page request

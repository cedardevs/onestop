import com.wiredforcode.gradle.spawn.SpawnProcessTask
import com.wiredforcode.gradle.spawn.KillProcessTask

apply plugin: 'groovy'
apply plugin: 'spring-boot'
apply plugin: "com.wiredforcode.spawn"
apply from: "${rootDir}/gradle/publishing.gradle"


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.6'
    compile 'org.elasticsearch:elasticsearch:2.3.3'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'com.github.fge:json-schema-validator:2.2.6'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'com.spatial4j:spatial4j:0.5' // Necessary for embedded ES to have geo_shape type available
    compile 'com.vividsolutions:jts:1.13' // Necessary for embedded ES to have geo_shape type available

    testCompile "org.spockframework:spock-spring:1.0-groovy-2.4"
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

ext {
    outputJar = file("${buildDir}/libs/${project.name}-${project.version}.jar")
}

bootRun {
    dependsOn ':elasticsearch:start'
}

jar {
    appendix = 'tmp' // changes output name so bootRepackage doesn't overwrite it
}

springBoot {
    backupSource = false
}

bootRepackage {
    outputFile = outputJar
    excludeDevtools = true
    executable = true
    onlyIf { !tasks.getByName('jar').state.upToDate }
}

task start(type: SpawnProcessTask) {
    dependsOn 'assemble' , ':elasticsearch:start'
    onlyIf { !(new File(projectDir, '.pid.lock').exists()) }

    directory projectDir.absolutePath
    command "java -jar ${outputJar}"
    ready 'Started Application'
}

task stop(type: KillProcessTask) {
    onlyIf { new File(projectDir, '.pid.lock').exists() }
    directory projectDir.absolutePath
}

configurations.configure {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        groovy.srcDir file('src/integrationTest/groovy')
        //resources.srcDir file('src/integrationTest/resources')
        compileClasspath += main.output + test.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest(type: Test, description: 'Runs the integration tests', group: 'verification') {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.junitXml.destination = 'build/integration-test-results'
    reports.html.destination = 'build/reports/integrationTests'
}

check.dependsOn integrationTest

publishing {
    publications {
        main(MavenPublication) {
            artifact outputJar
            artifactId "${rootProject.name}-${project.name}"
        }
    }
}

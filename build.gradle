buildscript {
  ext {
    springBootVersion = '2.1.4.RELEASE'
    gradleNodePluginVersion = '1.3.1'
    dependencyCheckGradleVersion = '5.0.0-M3.1'
    cedarDockerPluginVersion = '1.0.3'
  }
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "com.moowork.gradle:gradle-node-plugin:${gradleNodePluginVersion}"
    classpath "org.owasp:dependency-check-gradle:${dependencyCheckGradleVersion}"
    classpath "gradle.plugin.org.cedar:dockerplugin:${cedarDockerPluginVersion}"
  }
}

plugins {
  id 'com.gradle.build-scan' version '2.2.1'
  id "io.spring.dependency-management" version '1.0.6.RELEASE'
  id "jacoco"
}

apply plugin: 'groovy'

subprojects {

  project.ext {
    esVersion = '6.7.1'
    spockVersion = '1.2-groovy-2.5'
    testContainersVersion = '1.10.7'
    groovyVersion = '2.5.5'
    openSAMLVersion = '3.4.3'
    logbackVersion = '1.2.3'
    javaxServletAPIVersion = '4.0.1'
    junitVersion = '4.12'
    auth0JavaJWT = '3.4.1'
  }

  afterEvaluate {
    repositories {
      mavenCentral()
      maven { url "https://repo.spring.io/milestone" }
    }

    // override versions of dependencies with vulnerabilities
    configurations.all {
      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'com.fasterxml.jackson.core' && details.requested.name == 'jackson-databind') {
          if (details.requested.version.startsWith('2.9') && details.requested.version <= '2.9.9') {
            details.useVersion '2.9.9'
            details.because 'fixes vulnerability in 2.9.x before 2.9.9'
          }
        }
        if (details.requested.group == 'org.bouncycastle' && details.requested.name == 'bcprov-jdk15on') {
          if (details.requested.version.startsWith('1.5') && details.requested.version <= '1.59') {
            details.useVersion '1.62'
            details.because 'fixes vulnerability in 1.5x before 1.6x'
          }
        }
        if (details.requested.group == 'org.apache.zookeeper' && details.requested.name == 'zookeeper') {
          if (details.requested.version.startsWith('3.4') && details.requested.version <= '3.5.5') {
            details.useVersion '3.5.5'
            details.because 'Enforce zookeeper 3.4.14+ to avoid vulnerability CVE-2019-0201'
          }
        }
        if (details.requested.group == 'org.elasticsearch' && details.requested.name == 'elasticsearch') {
          if (details.requested.version <= esVersion) {
            details.useVersion esVersion
            details.because 'some packages had an earlier ES version'
          }
        }
        if (details.requested.group == 'org.apache.tomcat.embed' && details.requested.name == 'tomcat-embed-websocket') {
          if (details.requested.version <= '9.0.21') {
            details.useVersion '9.0.21'
            details.because 'fixes CVE-2019-0221'
          }
        }
        if (details.requested.group == 'org.apache.tomcat.embed' && details.requested.name == 'tomcat-embed-core') {
          if (details.requested.version <= '9.0.21') {
            details.useVersion '9.0.21'
            details.because 'fixes CVE-2019-0221'
          }
        }
      }
    }

    if (project.plugins.hasPlugin('org.cedar.dockerplugin')) {
      docker {
        username = System.getenv('DOCKER_USER')
        password = System.getenv('DOCKER_PASSWORD')
      }
    }

    if (project.plugins.hasPlugin('java')) {
        project.apply plugin: 'org.owasp.dependencycheck'

//      Not functioning in travis, disconnecting temporarily to move forward
//      project.tasks.findByName('check').dependsOn('dependencyCheck')

        dependencyCheck {
          skipConfigurations = ["providedRuntime"]
          suppressionFile = "${rootDir}/owasp-suppressions.xml"
          failBuildOnCVSS = 4

          // One of our dependencies has an un-parsable pom which causes dependency-checker
          // to throw an exception. However, the checks still run and it still generates a
          // report, so I think it's safe(ish) to ignore the error.
          failOnError = false
        }

        if(project.plugins.hasPlugin('jacoco')) {
          jacocoTestReport {
            executionData fileTree(projectDir).include("build/jacoco/*.exec")
            reports {
              xml.enabled = true
              xml.destination = "${buildDir}/reports/jacoco/report.xml"
              html.enabled = true
              html.destination = "${buildDir}/reports/jacoco/html"
            }
          }
          jacocoTestReport.dependsOn test
          check.dependsOn jacocoTestReport
        }
      }
    }
}

import java.time.*

gradle.taskGraph.beforeTask { Task task ->
  task.ext.setProperty("startTime", Instant.now())
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
  Instant then = task.ext.startTime as Instant
  Instant now = Instant.now()
  println task.name + " took " + Duration.between(then, now).toSeconds() + " seconds"
}

task publish(type: Exec, description: 'Promotes artifactory snapshot', group: 'publish') {
  onlyIf { isRelease }
  executable = "bash"
  args = ["-c", "curl -X POST -u \"\$BINTRAY_USER:\$BINTRAY_KEY\" -H \"Content-Length: 0\"" +
        " http://oss.jfrog.org/api/plugins/build/promote/snapshotsToBintray/${rootProject.name}/\$TRAVIS_BUILD_NUMBER?params=releaseVersion=$version"]
}

group = 'org.cedar.onestop'

subprojects.each {
  it.group = group
  it.version = version
  it.ext.buildDate = "${new Date().format("YYYY-MM-dd", TimeZone.getTimeZone('UTC'))}"
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

class UploadTestDataTask extends DefaultTask {

  @Input
  String apiAdminPort

  UploadTestDataTask() {
    description = 'Uploads test data to OneStop api-admin.'
    group = 'upload'
    apiAdminPort = 30098
  }

  @Option(option = 'apiAdminPort', description = 'Set the port of api-admin to upload data to (default: 30098).')
  void setApiAdminPort(final String apiAdminPort) {
    this.apiAdminPort = apiAdminPort
  }

  @TaskAction
  void uploadTestData() {
    // delete previously expanded testData directory, if it exists
    project.delete 'upload/testData'

    // expand the test data tar.gz into testData directory
    def testDataTGZ = 'testData_20180502.tar.gz'
    def stdoutExpand = new ByteArrayOutputStream()
    def stderrExpand = new ByteArrayOutputStream()
    def resultExpand = project.exec(new Action<ExecSpec>() {
      @Override
      void execute(ExecSpec execSpec) {
        execSpec.ignoreExitValue = true
        execSpec.workingDir 'upload'
        execSpec.executable = 'bash'
        execSpec.args = ['-c', "tar -xvzf ${testDataTGZ}"]
        execSpec.standardOutput = stdoutExpand
        execSpec.errorOutput = stderrExpand
      }
    })
    if (resultExpand.getExitValue() == 0) {
      print stdoutExpand
    } else {
      print stderrExpand
      String message = "failed to extract ${testDataTGZ}"
      throw new GradleException(message)
    }

    // run the upload script against the testData directory and api-metadata running locally
    def stdoutUpload = new ByteArrayOutputStream()
    def stderrUpload = new ByteArrayOutputStream()
    def resultUpload = project.exec(new Action<ExecSpec>() {
      @Override
      void execute(ExecSpec execSpec) {
        execSpec.ignoreExitValue = true
        execSpec.workingDir 'upload'
        execSpec.executable = 'bash'
        execSpec.args = ['-c', "./uploadToOnestopApi.sh ./testData http://localhost:${this.apiAdminPort}/onestop-admin/metadata"]
        execSpec.standardOutput = stdoutUpload
        execSpec.errorOutput = stderrUpload
      }
    })
    if (resultUpload.getExitValue() == 0) {
      print stdoutUpload
    } else {
      print stdoutUpload
      //print stderrUpload
      throw new GradleException("failed to upload test data")
    }
  }
}

task uploadTestData(type: UploadTestDataTask)

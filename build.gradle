buildscript {
  ext {
    springBootVersion = '2.1.8.RELEASE'
    gradleNodePluginVersion = '1.3.1'
    dependencyCheckGradleVersion = '5.0.0-M3.1'
  }
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "com.moowork.gradle:gradle-node-plugin:${gradleNodePluginVersion}"
    classpath "org.owasp:dependency-check-gradle:${dependencyCheckGradleVersion}"
  }
}

plugins {
  id 'com.gradle.build-scan' version '2.2.1'
  id "io.spring.dependency-management" version '1.0.6.RELEASE'
  id "jacoco"
}

apply plugin: 'groovy'

subprojects {

  project.ext {
    schemasVersion = '0.4.0'
    esVersion = '6.8.2'
    spockVersion = '1.2-groovy-2.5'
    testContainersVersion = '1.15.3'
    groovyVersion = '2.5.5'
    openSAMLVersion = '3.4.3'
    logbackVersion = '1.2.3'
    javaxServletAPIVersion = '4.0.1'
    junitVersion = '4.12'
    auth0JavaJWT = '3.4.1'
  }

  // URL for the source code under version control from which this container image was built.
  project.ext.getVcsUrl = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
      ignoreExitValue = true
      workingDir '.'
      executable = 'git'
      args = ['config', '--get', 'remote.origin.url']
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }

  // Identifier for the version of the source code from which this image was built.
  // For example if the version control system is git this is the SHA.
  project.ext.getVcsRef = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
      ignoreExitValue = true
      workingDir '.'
      executable = 'git'
      args = ['rev-parse', '--short', 'HEAD']
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }

  afterEvaluate {
    repositories {
      mavenCentral()
      maven { url "https://repo.spring.io/milestone" }
    }

    // override versions of dependencies with vulnerabilities
    configurations.all {
      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.apache.santuario' && details.requested.name == 'xmlsec') {
          if (details.requested.version.startsWith('2.0') && details.requested.version <= '2.1.4') {
            details.useVersion '2.1.4'
            details.because 'fixes CVE-2019-12400'
          }
        }

        if (details.requested.group == 'com.fasterxml.jackson.core' && details.requested.name == 'jackson-databind') {
          if (details.requested.version.startsWith('2.9') && details.requested.version <= '2.9.9') {
            details.useVersion '2.9.10'
            details.because 'fixes vulnerability in 2.9.9 and before'
          }
        }
        if (details.requested.group == 'org.bouncycastle' && details.requested.name == 'bcprov-jdk15on') {
          if (details.requested.version.startsWith('1.5') && details.requested.version <= '1.59') {
            details.useVersion '1.62'
            details.because 'fixes vulnerability in 1.5x before 1.6x'
          }
        }
        if (details.requested.group == 'org.apache.zookeeper' && details.requested.name == 'zookeeper') {
          if (details.requested.version.startsWith('3.4') && details.requested.version <= '3.5.5') {
            details.useVersion '3.5.5'
            details.because 'Enforce zookeeper 3.4.14+ to avoid vulnerability CVE-2019-0201'
          }
        }
        if (details.requested.group == 'org.apache.kafka' && details.requested.name == 'kafka_2.11') {
          if (details.requested.version.startsWith('2.0.1') && details.requested.version <= '2.2.1') {
            details.useVersion '2.2.1'
            details.because 'Enforce kafka_2.11 2.0.1 to avoid vulnerability CVE-2018-17196'
          }
        }
        if (details.requested.group == 'org.elasticsearch' && details.requested.name == 'elasticsearch') {
          if (details.requested.version <= esVersion) {
            details.useVersion esVersion
            details.because 'some packages had an earlier ES version'
          }
        }
        if (details.requested.group == 'org.apache.tomcat.embed' && details.requested.name == 'tomcat-embed-websocket') {
          if (details.requested.version <= '9.0.21') {
            details.useVersion '9.0.21'
            details.because 'fixes CVE-2019-0221'
          }
        }
        if (details.requested.group == 'org.apache.tomcat.embed' && details.requested.name == 'tomcat-embed-core') {
          if (details.requested.version <= '9.0.21') {
            details.useVersion '9.0.21'
            details.because 'fixes CVE-2019-0221'
          }
        }
        if (requested.group == "org.apache.logging.log4j") {
          if (details.requested.version < '2.17.0') {
            details.useVersion '2.17.0'
            details.because 'fixes vulnerability in 2.15.0 and before'
          }
        }
      }
    }

    if (project.plugins.hasPlugin('java')) {
        project.apply plugin: 'org.owasp.dependencycheck'

//      Not functioning in travis, disconnecting temporarily to move forward
//      project.tasks.findByName('check').dependsOn('dependencyCheck')

        dependencyCheck {
          skipConfigurations = ["providedRuntime"]
          suppressionFile = "${rootDir}/owasp-suppressions.xml"
          failBuildOnCVSS = 4

          // One of our dependencies has an un-parsable pom which causes dependency-checker
          // to throw an exception. However, the checks still run and it still generates a
          // report, so I think it's safe(ish) to ignore the error.
          failOnError = false
        }

        if(project.plugins.hasPlugin('jacoco')) {
          jacocoTestReport {
            executionData fileTree(projectDir).include("build/jacoco/*.exec")
            reports {
              xml.enabled = true
              xml.destination = "${buildDir}/reports/jacoco/report.xml"
              html.enabled = true
              html.destination = "${buildDir}/reports/jacoco/html"
            }
          }
          jacocoTestReport.dependsOn test
          check.dependsOn jacocoTestReport
        }
      }
    }
}

import java.time.*

gradle.taskGraph.beforeTask { Task task ->
  task.ext.setProperty("startTime", Instant.now())
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
  Instant then = task.ext.startTime as Instant
  Instant now = Instant.now()
  println task.name + " took " + Duration.between(then, now).toSeconds() + " seconds"
}

task publish(type: Exec, description: 'Promotes artifactory snapshot', group: 'publish') {
  onlyIf { isRelease }
  executable = "bash"
  args = ["-c", "curl -X POST -u \"\$BINTRAY_USER:\$BINTRAY_KEY\" -H \"Content-Length: 0\"" +
        " http://oss.jfrog.org/api/plugins/build/promote/snapshotsToBintray/${rootProject.name}/\$TRAVIS_BUILD_NUMBER?params=releaseVersion=$version"]
}

group = 'org.cedar.onestop'

subprojects.each {
  it.group = group
  it.version = version
  it.ext.buildDate = "${new Date().format("YYYY-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone('UTC'))}"
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}
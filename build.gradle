buildscript {
  ext {
    springBootVersion = '2.0.4.RELEASE'
  }
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.7.0"
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath 'com.wiredforcode:gradle-spawn-plugin:0.8.0'
    classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    classpath 'org.owasp:dependency-check-gradle:3.1.1'
    classpath "gradle.plugin.org.cedar:dockerplugin:1.0.2"
  }
}

plugins {
  id "com.jfrog.bintray" version "1.8.0"
  id "com.jfrog.artifactory" version "4.7.0"
  id 'com.gradle.build-scan' version '1.12.1'
  id "io.spring.dependency-management" version "1.0.4.RELEASE"
}

ext {
  esVersion = '5.5.3'
  // isRelease used by docker plugin as well
  isRelease = System.getenv('TRAVIS_TAG')?.startsWith('v') as Boolean
  springCloudVersion = 'Finchley.SR1'
}

subprojects {
  project.ext {
    esVersion = "${project.esVersion}"
    groovyVersion = '2.4.14'
    spockVersion = '1.1-groovy-2.4'
    testContainersVersion = '1.5.1'
  }

  afterEvaluate {
    repositories {
      mavenCentral()
      maven { url "https://repo.spring.io/milestone" }
    }

      // override versions of dependencies with vulnerabilities
    configurations.all {
      resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'com.fasterxml.jackson.core' && details.requested.name == 'jackson-databind') {
          if (details.requested.version.startsWith('2.9') && details.requested.version <= '2.9.5') {
            details.useVersion '2.9.5'
            details.because 'fixes vulnerability in 2.9.x before 2.9.5'
          }
        }
      }
    }

    dependencyManagement {
      imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
      }
    }

    if (project.plugins.hasPlugin('org.cedar.dockerplugin')) {
      docker {
        username = System.getenv('DOCKER_USER')
        password = System.getenv('DOCKER_PASSWORD')
      }
    }

    if (project.plugins.hasPlugin('java')) {
      project.apply plugin: 'org.owasp.dependencycheck'

//      Not functioning in travis, disconnecting temporarily to move forward
//      project.tasks.findByName('check').dependsOn('dependencyCheck')

      dependencyCheck {
        skipConfigurations = ["providedRuntime"]
        suppressionFile = "${rootDir}/owasp-suppressions.xml"
        failBuildOnCVSS = 4

        // One of our dependencies has an un-parsable pom which causes dependency-checker
        // to throw an exception. However, the checks still run and it still generates a
        // report, so I think it's safe(ish) to ignore the error.
        failOnError = false
      }

    }

  }

}

task publish(type: Exec, description: 'Promotes artifactory snapshot', group: 'publish') {
  onlyIf { isRelease }
  executable = "bash"
  args = ["-c", "curl -X POST -u \"\$BINTRAY_USER:\$BINTRAY_KEY\" -H \"Content-Length: 0\"" +
    " http://oss.jfrog.org/api/plugins/build/promote/snapshotsToBintray/${rootProject.name}/\$TRAVIS_BUILD_NUMBER?params=releaseVersion=$version"]
}

group = 'org.cedar.onestop'

subprojects.each {
  it.group = group
  it.version = version
  it.ext.buildDate = "${new Date().format("YYYY-MM-dd", TimeZone.getTimeZone('UTC'))}"
}

buildScan {
  licenseAgreementUrl = 'https://gradle.com/terms-of-service'
  licenseAgree = 'yes'
}

task startBackend(type: Exec, description: 'Starts minikube if not already running and sets docker env') {
  executable = 'bash'
  workingDir 'kubernetes'
  args = ['-c', './startMinikube.sh']
}

task deployBackend(type: Exec, description: 'Deploys Elasticsearch, both APIs, and Kibana on local minikube') {
  dependsOn "startBackend", ":api-search:build", ":api-metadata:build"
  executable = 'bash'
  workingDir 'kubernetes'
  args = ['-c', './deployBackend.sh']
}


task stopAndCleanBackend(type: Exec, description: 'Deletes all deployments and stops minikube') {
  workingDir 'kubernetes'
  executable = 'bash'
  args = ['-c', "./stopAndCleanBackend.sh"]
}

task openDashboards(description: 'Opens Kibana and Kubernetes dashboards') {
  doLast {
    exec {
      commandLine 'minikube', 'dashboard'
    }
    println "Opening Kibana dashboard in default browser..."
    exec {
      commandLine 'open', 'http://localhost:5601/app/kibana#/dev_tools/console?_g=()'
    }
  }
}

task uploadTestData(description: 'Uploads test data to elasticsearch.', group: 'upload') {
  doLast {
    // delete previously expanded testData directory, if it exists
    delete 'upload/testData'

    // expand the test data tar.gz into testData directory
    def testDataTGZ = 'testData_20180404.tar.gz'
    def stdoutExpand = new ByteArrayOutputStream()
    def stderrExpand = new ByteArrayOutputStream()
    def resultExpand = exec {
      ignoreExitValue = true
      workingDir 'upload'
      executable = 'bash'
      args = ['-c', "tar -xvzf ${testDataTGZ}"]
      standardOutput = stdoutExpand
      errorOutput = stderrExpand
    }
    if(resultExpand.getExitValue() == 0) {
      print stdoutExpand
    }
    else {
      print stderrExpand
      throw new GradleException("failed to extract ${testDataTGZ}")
    }

    // run the upload script against the testData directory and api-metadata running locally
    def stdoutUpload = new ByteArrayOutputStream()
    def stderrUpload = new ByteArrayOutputStream()
    def resultUpload = exec {
      ignoreExitValue = true
      workingDir 'upload'
      executable = 'bash'
      args = ['-c', './uploadToOnestopApi.sh ./testData http://localhost:8098/onestop/api/metadata']
      standardOutput = stdoutUpload
      errorOutput = stderrUpload
    }
    if(resultUpload.getExitValue() == 0) {
      print stdoutUpload
    }
    else {
      print stderrUpload
      throw new GradleException("failed to upload test data")
    }
  }
}

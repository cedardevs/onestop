golang {
  packagePath = 'github.com/cedardevs/onestop/cli/cmd/onestop' // go import path of project to be built, NOT local file system path!
}

goBuild {

  targetPlatform = ['linux-amd64', 'darwin-amd64']
}

dependencies {
    golang {
        build(['name':'github.com/danielgtaylor/openapi-cli-generator'])
        build(['name':'github.com/pkg/errors'])
        build(['name':'github.com/rs/zerolog'])
        build(['name':'github.com/spf13/cobra'])
        build(['name':'github.com/spf13/viper'])
        build(['name':'gopkg.in/h2non/gentleman.v2'])
    }
}

jar {
  // even though we use the `java` plugin because of the `jib` plugin,
  // the Go project does not need to generate a jar file
  enabled = false
}

jib {
  use(PublishingKt) {
    Publish publish = project.publish

    extraDirectories {
      paths = ["${projectDir}/.gogradle".toString()]
      permissions = [
          '/cli-linux-amd64'       : '755',
          '/scdr-files.config.yaml': '555'
      ]
    }

    from {
      // base image
      image = 'golang'
    }

    to {
      image = publish.repository()
      auth {
        username = publish.username
        password = publish.password
      }
    }

    container {
      creationTime = publish.created.toString()
      labels = publish.ociAnnotations()
      entrypoint = "/cli-linux-amd64"
    }
  }
}
tasks.jib.dependsOn 'goBuild'
tasks.jibDockerBuild.dependsOn 'goBuild'

build {
    dependsOn 'goBuild'
}

clean.dependsOn goClean

//move config into .gogradle so it is moved during extraDirectories step.
task copyConfigFile(type: Copy) {
  from file('scdr-files-config.yaml')
  into file('.gogradle/')
  doLast{
    project.exec {
      commandLine 'chmod', '-R', '774', '.gogradle'
    }
  }
}
tasks.jib.dependsOn copyConfigFile

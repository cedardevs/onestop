plugins {
  id 'com.google.cloud.tools.jib' version '1.6.1'
}

apply plugin: 'java'
apply plugin: "com.moowork.node"
apply from: "${rootDir}/gradle/publishing.gradle"

node {
    version = '10.15.3'
    download = true
}

clean {
    doFirst {
      npmClean
    }
}

task npmClean(type: NpmTask) {
  args = ['run', 'clean']
}

def sourceDirs = ['node_modules', 'img', 'src']

task compile(type: NodeTask) {
    dependsOn 'npmInstall'
    sourceDirs.each {
        inputs.dir(it).skipWhenEmpty()
    }
    outputs.dir("${buildDir}/dist")
    script = file('node_modules/.bin/webpack')
    args = ['--bail', '-p']
    execOverrides {
        it.environment 'NODE_ENV', 'production'
    }
    doFirst {
        // Remove previous outputs. Doesn't run if the task if UP-TO-DATE
        file("${buildDir}/dist").deleteDir()
    }
}

task npmRunDev(type: NpmTask) {
  args = ['run', 'dev']
}

task npmRunKub(type: NpmTask) {
  args = ['run', 'kub']
}

task tarResults(type: Tar) {
  dependsOn { ['compile', 'npmInstall'] }


  from "${buildDir}/dist"
  // Set these file/directory permissions so on Prem client can be executed via tomcat.
  fileMode(0744)
  dirMode(0755)
  archiveBaseName.set("${rootProject.name}-${project.name}")
  archiveExtension.set("tar.gz")
  archiveVersion.set("")

  // If the `archiveFileName` has not been explicitly set,
  // the pattern for the name is:
  // "${archiveBaseName}-${archiveAppendix}-${archiveVersion}-${archiveClassifier}.${archiveExtension}"
  archiveFileName.set("${archiveBaseName.get()}.${archiveExtension.get()}")

  setCompression(Compression.GZIP)
  destinationDirectory = file("${buildDir}/libs")
}

assemble.dependsOn 'tarResults'

npm_test {
    dependsOn 'compile'
    sourceDirs.each {
        inputs.dir(it).skipWhenEmpty()
    }
    inputs.dir('test').skipWhenEmpty()
}

task formatCheck(type: NpmTask) {
  args = ['run', 'formatCheck',]
}

test.dependsOn(npm_test)

task retire(type: NpmTask) {
  args = ['run', 'retire']
}

check {
    dependsOn 'test'
    dependsOn 'retire'
    dependsOn 'formatCheck'
}

build {
    dependsOn 'assemble', 'check', 'tarResults'
}

task copyUnpackedTar(type: Copy) {
  from tarTree(file("${buildDir}/libs/${rootProject.name}-${project.name}.tar.gz".toString()))
  into file("${buildDir}/jib-dir/usr/app/client".toString())
}
tasks.copyUnpackedTar.dependsOn tarResults
task copyEntrypoint(type: Copy) {
  from file("docker/entrypoint.sh".toString())
  into file("${buildDir}/jib-dir/usr/app".toString())
}
task copyHttpConf(type: Copy) {
  from file("docker/httpd.conf".toString())
  into file("${buildDir}/jib-dir/usr/local/apache2/conf".toString())
}
tasks.jib.dependsOn copyUnpackedTar
tasks.jib.dependsOn copyEntrypoint
tasks.jib.dependsOn copyHttpConf
tasks.jibDockerBuild.dependsOn copyUnpackedTar
tasks.jibDockerBuild.dependsOn copyEntrypoint
tasks.jibDockerBuild.dependsOn copyHttpConf
jib {
  extraDirectories {
    // copy all files within the `${buildDir}/jib-dir`` folder to the image's root directory,
    // maintaining the same structure (this is why we had to custom copy items before the jib task
    // jib-dir/
    // - /usr/app/client/onestop-client.tar.gz
    // - /usr/app/entrypoint.sh
    // - /usr/local/apache2/conf/httpd.conf
    paths = ["${buildDir}/jib-dir".toString()]
  }

  // derive image repository
  String imageRegistryURL = "registry.hub.docker.com"
  String imageNamespace = "cedardevs"
  String imageName = "${rootProject.name}-${project.name}".toString()
  String imageTag = "${project.version}".toString()
  String imageRepository = "${imageRegistryURL}/${imageNamespace}/${imageName}:${imageTag}".toString()

  from {
    // base image
    image = 'httpd:latest'
  }
  to {
    image = imageRepository
    auth {
      username = System.getenv('DOCKER_USER').toString().trim()
      password = System.getenv('DOCKER_PASSWORD').toString().trim()
    }
  }
  container {
    // https://github.com/opencontainers/image-spec/blob/master/annotations.md
    labels = [
        'org.opencontainers.image.created': project.buildDate.toString(),
        'org.opencontainers.image.ref.name': imageName,
        'org.opencontainers.image.description': 'A search API for the OneStop search software.',
        'org.opencontainers.image.source': project.getVcsUrl().toString(),
        'org.opencontainers.image.revision': project.getVcsRef().toString(),
        'org.opencontainers.image.vendor': imageNamespace,
        'org.opencontainers.image.version': imageTag,
    ]
    ports = ['80'.toString()]
    entrypoint = ["sh", "/usr/app/entrypoint.sh"]
    creationTime = project.buildDate.toString()
  }
}

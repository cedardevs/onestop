apply plugin: "com.moowork.node"
apply plugin: 'org.cedar.dockerplugin'
apply from: "${rootDir}/gradle/publishing.gradle"

node {
    version = '10.15.1'
    download = true
}

clean {
    doFirst {
      npm_clean
    }
}

task npm_clean(type: Exec) {
  executable = "bash"
  args = ["-c", "npm run clean"]
}

def sourceDirs = ['node_modules', 'img', 'src']

task compile(type: NodeTask) {
    dependsOn 'npmInstall'
    sourceDirs.each {
        inputs.dir(it).skipWhenEmpty()
    }
    outputs.dir("${buildDir}/dist")
    script = file('node_modules/.bin/webpack')
    args = ['--bail', '-p']
    execOverrides {
        it.environment 'NODE_ENV', 'production'
    }
    doFirst {
        // Remove previous outputs. Doesn't run if the task if UP-TO-DATE
        file("${buildDir}/dist").deleteDir()
    }
}

task start(type: Exec) {
  executable = "bash"
  args = ["-c", "npm run dev"]
}

task tarResults(type: Tar) {
    dependsOn 'compile'

    from "${buildDir}/dist"
    baseName = 'onestop-client'
    version = project.version
    compression = 'gzip'
    extension = 'tar.gz'
    destinationDir = file("${buildDir}/libs")
}

assemble.dependsOn 'tarResults'

npm_test {
    dependsOn 'compile'
    sourceDirs.each {
        inputs.dir(it).skipWhenEmpty()
    }
    inputs.dir('test').skipWhenEmpty()
}

task formatCheck (type: Exec) {
  executable = "bash"
  args = ["-c", "npm run formatCheck"]
}

task test {
    dependsOn 'npm_test'
}

task retire(type: Exec) {
  executable = "bash"
  args = ["-c", "npm run retire"]
}

check {
    dependsOn 'test'
    dependsOn 'retire'
    dependsOn 'formatCheck'
}

build {
    dependsOn 'assemble', 'check'
}

task sourceJar(type: Jar) {
  classifier "sources"

  baseName = "${rootProject.name}-${project.name}"
  from "${projectDir}/src"
}

build.dependsOn sourceJar

publishing {
    publications {
        main(MavenPublication) {
            artifact tarResults.outputs.files.singleFile, {
                extension 'tar.gz'
            }
            artifactId "${rootProject.name}-${project.name}"
            artifact tasks.sourceJar
        }
    }
}

docker {
  additionalBuildArgs = [TAR_NAME: tarResults.outputs.files.singleFile.name]
}

BuildDockerImage.dependsOn(tarResults)
// assemble.dependsOn(BuildDockerImage)
PublishDockerImage.dependsOn(BuildDockerImage)
publish.dependsOn PublishDockerImage

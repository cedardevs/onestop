apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "onestop-indexer.fullname" . }}
  labels: {{- include "onestop-indexer.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "onestop-indexer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.config }}
      annotations:
        checksum/config: {{ . | sha256sum }}
      {{- end }}
      labels:
        {{- include "onestop-indexer.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.debug }}
      shareProcessNamespace: true
      {{- end }}
      containers:
        {{- if .Values.debug }}
        - name: debug
          image: centos
          command: ["tail", "-f", "/dev/null"]
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
        {{- end }}
        - name: {{ .Chart.Name }}
          image: {{ printf "%s:%s" .Values.image.repository .Values.image.tag | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            {{- if .Values.debug }}
            - name: jdwp
              containerPort: 5005
            {{- end }}
          env:
          # EXPORT ADDITIONAL CONFIG LOCATION (if config provided)
          {{- if .Values.config }}
            # if Helm values have a config section, it will be mounted as a YML file
            # this tells Spring where the additional config file is mounted
            - name: CONFIG_LOCATION # TODO - use the right env var here
              value: /etc/conf/application.yml
          {{- end }}
          # generic env overrides, for spring properities, etc
          {{- if .Values.env }}
            {{- range $envName,$envVal := .Values.env }}
            - name: {{ $envName }}
              value: {{ $envVal | quote }}
            {{- end }}
          {{- end }}
          # DEFINE ENVIRONMENT VARIABLES FOR ELASTICSEARCH
          # this will effectively override defaults in the application YML
            - name: elasticsearch.host
              value: {{ .Values.elasticsearch.host }}
            - name: elasticsearch.port
              value: {{ .Values.elasticsearch.port | quote }}
            - name: elasticsearch.ssl.enabled
              value: {{ .Values.elasticsearch.ssl.enabled | quote }}
            {{- if .Values.elasticsearch.ssl.certSecret }}
            - name: elasticsearch.ssl.cert.path
              value: "/etc/certs/elasticsearch"
            - name: elasticsearch.ssl.cert.tls
              value: "tls.crt"
            {{- end }}
            {{- with .Values.elasticsearch.username }}
            - name: elasticsearch.rw.user
              {{- toYaml . | nindent 14 }}
            {{- end }}
            {{- with .Values.elasticsearch.password }}
            - name: elasticsearch.rw.pass
              {{- toYaml . | nindent 14 }}
            {{- end }}
            {{- if .Values.debug }}
            - name: JAVA_TOOL_OPTIONS
              value: '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005'
            {{- end }}
          readinessProbe:
            httpGet:
              path: /health/readiness
              port: 8080
            initialDelaySeconds: 20
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 2
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 1
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          # MOUNT ADDITIONAL CONFIG IN THIS CONTAINER (if config provided)
          # done via ConfigMap and associated volume
          {{- if .Values.config }}
            - name: config-volume
              mountPath: /etc/conf/
          {{- end }}
          # MOUNT PUBLIC CERTS FOR ELASTICSEARCH (ca.crt & tls.crt)
          {{- if .Values.elasticsearch.ssl.certSecret }}
            - name: es-http-certs-public-volume
              mountPath: "/etc/certs/elasticsearch"
              readOnly: true
          {{- end }}
      volumes:
      # CREATE VOLUME FOR ADDITIONAL CONFIG (if config provided)
      # additional location for Spring config allows overriding defaults
      {{- if .Values.config }}
        - name: config-volume
          configMap:
            name: {{ include "onestop-indexer.configname" . }}
      {{- end }}
      # CREATE VOLUME FOR ELASTICSEARCH PUBLIC CERTS
      {{- with .Values.elasticsearch.ssl.certSecret }}
        - name: es-http-certs-public-volume
          secret:
            secretName: {{ . | quote }}
      {{- end }}
#      restartPolicy: Always
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "onestop-search.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "onestop-search.name" . }}
    helm.sh/chart: {{ include "onestop-search.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "onestop-search.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      {{- with .Values.config }}
      annotations:
        checksum/config: {{ . | sha256sum }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "onestop-search.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: {{ printf "%s:%s" .Values.image.repository .Values.image.tag | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
          # EXPORT ADDITIONAL CONFIG LOCATION (if config provided)
          {{- if .Values.config }}
            # if Helm values have a config section, it will be mounted as a YML file
            # this tells Spring where the additional config file is mounted
            - name: SPRING_CONFIG_ADDITIONAL-LOCATION
              value: /etc/conf/application.yml
          {{- end }}
          # EXPORT ACTIVE SPRING PROFILES TO TELL SPRING WHICH FEATURES TO ENABLE
          # the loop is making a comma delimited list for multi-feature handling
            - name: SPRING_PROFILES_ACTIVE
              value: '{{ $active := dict "profiles" (list) -}}
                      {{- range $feature, $enabled := .Values.features -}}
                        {{- if $enabled -}}
                          {{- $noop := $feature | append $active.profiles | set $active "profiles" -}}
                        {{- end -}}
                      {{- end -}}
                      {{- join "," $active.profiles }}'
          # generic env overrides, for spring properities, etc
          {{- if .Values.env }}
            {{- range $envName,$envVal := .Values.env }}
            - name: {{ $envName }}
              value: {{ $envVal | quote }}
            {{- end }}
          {{- end }}
          # EXPORT PATHS KEYSTORES (if security feature enabled)
          {{- if (index .Values "features" "login-gov") }}
            - name: LOGIN_GOV_KEYSTORE_FILE
              value: {{ .Values.keystoreFiles.jks.loginGov }}
          {{- end }}
          # EXPORT SECRET ENVIRONMENT VARIABLES IN THIS CONTAINER (if security feature enabled)
          # the general utility here is taking "env" type secrets in our Helm values,
          # mapping the keys directly to environment variables w/optional prefix,
          # and uppercasing / replacing problematic '-' and '.' characters with '_'
          {{- if (index .Values "features" "login-gov") }}
            {{- range $secret := .Values.secrets }}
              {{- if eq $secret.type "env" }}
                {{- range $key := $secret.keys }}
                  {{- $envPrefix := $secret.prefix | default "" | upper }}
                  {{- $envKey := $key | upper | replace "." "_" | replace "-" "_" }}
            - name: {{ $envPrefix }}{{ $envKey }}
              valueFrom:
                secretKeyRef:
                  name: {{ $secret.name }}
                  key: {{ $key }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- end }}

          # DEFINE ENVIRONMENT VARIABLES FOR ELASTICSEARCH
          # this will effectively override defaults in the application YML
            - name: elasticsearch.host
              value: {{ .Values.elasticsearch.host }}
            - name: elasticsearch.port
              value: {{ .Values.elasticsearch.port | quote }}
            - name: elasticsearch.ssl.enabled
              value: {{ .Values.elasticsearch.ssl.enabled | quote }}
            - name: elasticsearch.ssl.cert.path
              value: {{ .Values.elasticsearch.ssl.cert.path }}
            - name: elasticsearch.ssl.cert.tls
              value: {{ .Values.elasticsearch.ssl.cert.tls }}
            - name: elasticsearch.ro.user
              value: {{ .Values.elasticsearch.ro.user }}
            # The password, specifically, is derived from the ECK operator secret, keyed by the username
            - name: elasticsearch.ro.pass
              valueFrom:
                secretKeyRef:
                  name: onestop-es-elastic-user
                  key: {{ .Values.elasticsearch.ro.user }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          # MOUNT ADDITIONAL CONFIG IN THIS CONTAINER (if config provided)
          # done via ConfigMap and associated volume
          {{- if .Values.config }}
            - name: config-volume
              mountPath: /etc/conf/
          {{- end }}
          # MOUNT SECRET FILES IN THIS CONTAINER (if security feature enabled)
          # if there are multiple containers in the pod,
          # then each container needs its own volumeMounts block
          {{- if (index .Values "features" "login-gov") }}
            {{- range $secret := .Values.secrets }}
              {{- if eq $secret.type "file" }}
            - name: {{ $secret.name }}-volume
              mountPath: {{ $secret.path }}
              readOnly: true
              {{- end }}
            {{- end }}
          {{- end }}
          # MOUNT PUBLIC CERTS FOR ELASTICSEARCH (ca.crt & tls.crt)
            - name: onestop-es-http-certs-public-volume
              mountPath: {{ .Values.elasticsearch.ssl.cert.path }}
              readOnly: true
      volumes:
        # CREATE VOLUME FOR ADDITIONAL CONFIG (if config provided)
        # additional location for Spring config allows overriding defaults
        {{- if .Values.config }}
          - name: config-volume
            configMap:
              name: {{ include "onestop-search.configname" . }}
        {{- end }}
        # CREATE VOLUME FOR SECRET FILES (if security feature enabled)
        # secret must be created in the Kubernetes API before it can be used
        # only 1 `spec.volumes` entry is needed per secret, even if it contains multiple keys
        {{- if (index .Values "features" "login-gov") }}
          {{- range $secret := .Values.secrets }}
            {{- if eq $secret.type "file" }}
          - name: {{ $secret.name }}-volume
            secret:
              secretName: {{ $secret.name }}
            {{- end }}
          {{- end }}
        {{- end }}
        # CREATE VOLUME FOR ELASTICSEARCH PUBLIC CERTS
        # the secret name used here is the default used for the ECK operator
          - name: onestop-es-http-certs-public-volume
            secret:
              secretName: onestop-es-http-certs-public
#      restartPolicy: Always
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}

<?xml version="1.0" encoding="UTF-8"?>
<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">

  <suppress>
     <notes><![CDATA[
     file name: lodash:4.17.15
     Vunerability is specific to function zipObjectDeep, which is not used in our code.
     ]]></notes>
     <packageUrl regex="true">^pkg:npm/lodash@.*$</packageUrl>
     <vulnerabilityName>1523</vulnerabilityName>
  </suppress>

  <suppress>
    <notes><![CDATA[
     file name: json-schema-core-1.2.8.jar
     Tests have been added to confirm that XML parsing has DTD disabled, and endpoints accepting application/json data reject all xml.
     ]]></notes>
    <gav regex="true">^com\.github\.java-json-tools:json-schema-core:.*$</gav>
    <cve>CVE-2018-1000840</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      Applies to FasterXML jackson-databind versions 2.9.x or earlier, while this application uses 2.10.1 via gradle
      dependency resolution strategy
      ]]></notes>
    <cve>CVE-2017-17485</cve>
    <cve>CVE-2018-5968</cve>
    <cve>CVE-2017-7525</cve>
    <cve>CVE-2017-15095</cve>
    <cve>CVE-2018-14718</cve>
    <cve>CVE-2018-1000873</cve>
    <cve>CVE-2018-7489</cve>
    <cve>CVE-2019-17267</cve>
    <cve>CVE-2019-16335</cve>
    <cve>CVE-2019-14540</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      Applies to spring framework versions prior to 5.0.x, which are not in use in this application
      ]]></notes>
    <cve>CVE-2016-9878</cve>
    <cve>CVE-2018-1270</cve>
    <cve>CVE-2018-1271</cve>
    <cve>CVE-2018-1272</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      file name: avro-1.8.2.jar (shaded: com.google.guava:guava:11.0.2)
      This vulnerability refers to an unbounded allocation that can occur during the deserialization of several specific
      classes provided by the Guava library. However, the only usage of Guava in this project is as a shaded dependency
      within the avro jar, and only the specific classes in use by avro have been shaded into it. Those shaded dependencies
      include neither AtomicDoubleArray nor CompoundOrdering_CustomFieldSerializer, the two classes containing the
      vulnerability (see the fix implemented later in Guava: https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)
      In short, this vulnerability *as flagged due to avro-1.8.2.jar* is not present in this project.
    ]]></notes>
    <sha1>906d56dcbd43343b6ca42188ae18ba98dc6c2fdf</sha1>
    <cve>CVE-2018-10237</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      file name: xz-1.5.jar
      This CVE (https://nvd.nist.gov/vuln/detail/CVE-2015-4035) refers to a script which is included in the
      xzgrep command line tool. That script is not included in this jar, which is used to compress avro messages.
    ]]></notes>
    <cve>CVE-2015-4035</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      Has to do with a flaw in default CORS filter configuration.
      Note that the default packaged war of this application does not contain
      this dependency as it is designed to be deployed to an existing servlet
      container.
      ]]></notes>
    <filePath regex="true">.*\btomcat-.*\.jar</filePath>
    <cve>CVE-2018-8014</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      This vulnerability is marked as only present in Spring Framework 5.0.5.RELEASE. Because we are using Spring Boot
      2.1.4.RELEASE as of this suppression, this corresponds to Spring Framework 5.1.6.RELEASE which does not have this
      vulnerability, and it is coming up as a false positive. See the DependencyCheck GitHub issue comment here:
      https://github.com/jeremylong/DependencyCheck/issues/1827#issuecomment-479649131
    ]]></notes>
    <cve>CVE-2018-1258</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      These CVE vulnerabilities are all described in relation to Spring Framework versions <= 4. Because the dependency
      triggering these (spring-retry-1.2.4.RELEASE.jar) is coming from 'org.springframework.kafka:spring-kafka' and --
      as of this suppression -- the version of spring-kafka is 2.2.5.RELEASE, we know that the corresponding Spring
      version is 5.1.6.RELEASE. This can be confirmed by reviewing the `build.gradle` file for the 'spring-kafka' project
      under the v.2.2.5 tag. See: https://github.com/spring-projects/spring-kafka/blob/v2.2.5.RELEASE/build.gradle
    ]]></notes>
    <cve>CVE-2011-2730</cve>
    <cve>CVE-2013-4152</cve>
    <cve>CVE-2013-6429</cve>
    <cve>CVE-2013-7315</cve>
    <cve>CVE-2014-0054</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      We are supressing this CVE for two reasons. First, it is triggered by our dependency on 'org.testcontainers:testcontainers:1.10.7'
      which has a subdependency of 'org.apache.commons:commons-compress:1.18'. According to the official CVE description, this
      vulnerability applies to versions 1.7 to 1.17 of commons-compress (specifically using ZipArchiveInputStream). Our
      dependency graph indicates we are using a newer version. Second, this dependency is strictly used for testing and not production
      artifacts.
    ]]></notes>
    <cve>CVE-2018-11771</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      file name: pac4j-core-3.8.2.jar
      This vulnerability relates to using pac4j to authenticate via SAML, which is something we are not using pac4j to do
    ]]></notes>
    <sha1>4a4e49d0c3ae69671a3c8d63d730b0fc84da91a5</sha1>
    <cve>CVE-2019-10755</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      file name: spring-webmvc-pac4j-3.2.0.jar
      This vulnerability relates to using pac4j to authenticate via SAML, which is something we are not using pac4j to do
    ]]></notes>
    <sha1>6fa360c8647f4c5d166437883bbfe639826fc162</sha1>
    <cve>CVE-2019-10755</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      file name: spring-webmvc-pac4j-3.2.0.jar
      These CVE vulnerabilities are all described in relation to Spring Framework versions <= 4. Because the dependency
      triggering these is coming from spring mvc version 3 and 4 but we know we using spring mvc 5.2.7.
    ]]></notes>
    <cve>CVE-2014-1904</cve>
    <cve>CVE-2014-3578</cve>
    <cve>CVE-2014-3625</cve>
    <cve>CVE-2014-0225</cve>
    <cve>CVE-2013-6430</cve>
    <cve>CVE-2015-5211</cve>
    <cve>CVE-2016-5007</cve>
    <cve>CVE-2015-3192</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      file names: spring-boot-starter-reactor-netty-2.2.0.RELEASE.jar, reactor-netty-0.9.0.RELEASE.jar
      This is a false positive. The CVE refers to netty prior to 3.9.2, but we're forcing the actual underlying
      netty-all dependency to 4.1.42.Final by rule.
    ]]></notes>
    <cve>CVE-2014-3488</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      file names: spring-boot-starter-reactor-netty-2.2.0.RELEASE.jar, reactor-netty-0.9.0.RELEASE.jar
      This is a false positive. The CVE refers to netty 4.1.x before 4.1.0.Beta5, but we're forcing the actual underlying
      netty-all dependency to 4.1.42.Final by rule.
    ]]></notes>
    <cve>CVE-2015-2156</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
      file names: spring-boot-starter-reactor-netty-2.2.0.RELEASE.jar, reactor-netty-0.9.0.RELEASE.jar
      This is a false positive. The CVE refers to netty befre 4.1.42.Final, but we're forcing the actual underlying
      netty-all dependency to 4.1.42.Final by rule.
    ]]></notes>
    <cve>CVE-2019-16869</cve>
  </suppress>

<!-- dev npm dependency and gradle address approach for npm checks -->
  <suppress>
    <notes><![CDATA[
   file name: npm:6.14.5
   ]]></notes>
    <packageUrl regex="true">^pkg:npm/npm@.*$</packageUrl>
    <vulnerabilityName>1543</vulnerabilityName>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: npm-registry-fetch:4.0.4
   ]]></notes>
    <packageUrl regex="true">^pkg:npm/npm\-registry\-fetch@.*$</packageUrl>
    <vulnerabilityName>1544</vulnerabilityName>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: dompurify:1.0.11
   ]]></notes>
    <packageUrl regex="true">^pkg:npm/dompurify@.*$</packageUrl>
    <vulnerabilityName>1205</vulnerabilityName>
    <vulnerabilityName>1223</vulnerabilityName>
    <vulnerabilityName>CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</vulnerabilityName>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: gradle-api-6.5.jar: jquery.min-3.4.1.js
   ]]></notes>
    <packageUrl regex="true">^pkg:javascript/jquery@.*$</packageUrl>
    <cve>CVE-2020-11022</cve>
    <cve>CVE-2020-11023</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: marked:0.6.3
   ]]></notes>
    <packageUrl regex="true">^pkg:npm/marked@.*$</packageUrl>
    <vulnerabilityName>1076</vulnerabilityName>
    <vulnerabilityName>CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</vulnerabilityName>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: yargs-parser:11.1.1
   ]]></notes>
    <sha1>f41f7384c94f7bc0d0a9b0b604dd03e12a510472</sha1>
    <cve>CVE-2020-7608</cve>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: yargs-parser:*
   ]]></notes>
    <packageUrl regex="true">^pkg:npm/yargs\-parser@.*$</packageUrl>
    <vulnerabilityName>CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')</vulnerabilityName>
    <vulnerabilityName>1500</vulnerabilityName>
  </suppress>
  <suppress>
    <notes><![CDATA[
   file name: yargs-parser:9.0.2
   ]]></notes>
    <packageUrl regex="true">^pkg:npm/yargs\-parser@.*$</packageUrl>
    <vulnerabilityName>CVE-2020-7608</vulnerabilityName>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: dot-prop:4.2.0
   ]]></notes>
    <packageUrl regex="true">^pkg:npm/dot\-prop@.*$</packageUrl>
    <vulnerabilityName>1213</vulnerabilityName>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: websocket-extensions:0.1.4
   ]]></notes>
    <packageUrl regex="true">^pkg:npm/websocket\-extensions@.*$</packageUrl>
    <vulnerabilityName>CVE-2020-7663</vulnerabilityName>
  </suppress>

  <suppress>
    <notes><![CDATA[
   file name: kotlin-*-1.3.72.jar
   ]]></notes>
    <filePath regex="true">.*\bkotlin-.*-1\.3\.72\.jar</filePath>
    <cve>CVE-2020-15824</cve>
  </suppress>

</suppressions>

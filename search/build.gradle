plugins {
  // https://plugins.gradle.org/plugin/io.forgo.keystoreplugin
  id "io.forgo.keystoreplugin" version "1.1"
}

sourceCompatibility = 11
targetCompatibility = 11

dependencies {
  def Versions = project.Versions

  implementation(project(':data-common'))
  implementation(project(':elastic-common'))
  testImplementation(project(path: ':elastic-common', configuration: 'testElastic'))

  implementation("org.codehaus.groovy:groovy:${Versions.GROOVY}")
  implementation("org.codehaus.groovy:groovy-json:${Versions.GROOVY}")
  implementation("org.codehaus.groovy:groovy-xml:${Versions.GROOVY}")

  implementation("org.elasticsearch.client:elasticsearch-rest-client:${Versions.ELASTIC}")
  implementation("org.elasticsearch.client:elasticsearch-rest-high-level-client:${Versions.ELASTIC}")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("org.springframework.boot:spring-boot-devtools")
  implementation("org.springframework.boot:spring-boot-starter-security")

  implementation("org.springframework.security:spring-security-core")
  implementation("org.springframework.security:spring-security-config")
  implementation("org.springframework.security:spring-security-oauth2-client")
  implementation("org.springframework.security:spring-security-oauth2-jose")

  implementation("com.auth0:java-jwt:${Versions.AUTH0_JAVA_JWT}")

  implementation("com.github.java-json-tools:json-schema-validator:2.2.8")
  implementation("org.apache.commons:commons-lang3:3.7")
  implementation("org.apache.lucene:lucene-expressions:7.2.1")
  implementation("javax.xml.bind:jaxb-api:2.3.1") // Java 9/10 deprecates, 11 removes javax.xml.bind.DatatypeConverter

  runtime("org.springframework.boot:spring-boot-devtools")

  // providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

  testImplementation("org.spockframework:spock-spring:${Versions.SPOCK}")
  testImplementation("org.spockframework:spock-core:${Versions.SPOCK}")
  testImplementation("org.codehaus.groovy.modules.http-builder:http-builder:0.7.1")
  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation("org.testcontainers:testcontainers:${Versions.TEST_CONTAINERS}")
  testImplementation("org.testcontainers:elasticsearch:${Versions.TEST_CONTAINERS}")
}

ext {
  /*
   * "bootrun" login.gov configurations
   * -- IMPORTANT:
   *    -> individual developers testing with bootrun w/out skaffold need to run the `./gradlew search:jks` task
   *       to generate a working keystore to sign JWTs in the login process
   *
   *    -> this will require you to copy the contents of the generated `.keystore/logingov.crt` public key
   *    into the login.gov Dashboard test app (matching the clientId being used below). This will break
   *    other developer's workflow who are testing against the same clientId because the public key will no longer match
   *    the private key they are using to sign their JWTs. If you wish to work in parallel, it is better to use a
   *    constant configuration via skaffold or sciapps. Otherwise, you may wish to register your own test app with
   *    login.gov. Just remember NOT to check in your custom clientId to this build file!
   */
  boolean testWithOneStop = false

  envVars = [:] as Map<String, ?>

  if (testWithOneStop) {
    // local testing with frontend client proxying from 8080
    // -- use these values if you want to test logging in via OneStop running on 8080
    envVars.LOGIN_GOV_CLIENT_ID = "urn:gov:gsa:openidconnect.profiles:sp:sso:NOAA:onestop_api_search_localhost_8080"
    envVars.LOGIN_GOV_ALLOWED_ORIGIN = "http://localhost:8080"
    envVars.LOGIN_GOV_LOGIN_SUCCESS_REDIRECT = "http://localhost:8080/onestop"
    envVars.LOGIN_GOV_LOGIN_FAILURE_REDIRECT = "http://localhost:8080/onestop"
    envVars.LOGIN_GOV_LOGOUT_SUCCESS_REDIRECT = "http://localhost:8080/onestop"
  } else {
    // local testing with standalone search api on port 8097
    // -- use these values if you want to test logging in directly against onestop-search on 8097
    envVars.LOGIN_GOV_CLIENT_ID = "urn:gov:gsa:openidconnect.profiles:sp:sso:NOAA:onestop_api_search_localhost_8097"
    envVars.LOGIN_GOV_ALLOWED_ORIGIN = "http://localhost:8097"
    envVars.LOGIN_GOV_LOGIN_SUCCESS_REDIRECT = "http://localhost:8097/onestop-search/login_profile"
    envVars.LOGIN_GOV_LOGIN_FAILURE_REDIRECT = "http://localhost:8097/onestop-search/login_profile"
    envVars.LOGIN_GOV_LOGOUT_SUCCESS_REDIRECT = "http://localhost:8097/onestop-search/login_profile"
  }

  // login.gov keystore configuration (for JWT signing on token request)
  keystoreOutputDir = ".keystore"
  keystoreFile = "logingov.jks"

  envVars.LOGIN_GOV_KEYSTORE_FILE = "${keystoreOutputDir}/${keystoreFile}"
  envVars.LOGIN_GOV_KEYSTORE_ALIAS = "logingov"
  envVars.LOGIN_GOV_KEYSTORE_PASSWORD = "password"
}

// keystore plugin readme:
// https://github.com/forgo/keystore-gradle-plugin/blob/master/README.md
keystore {
  outputDir = "${project.keystoreOutputDir}"

  keyFile = "logingov.key"
  keyPassword = "${project.envVars.LOGIN_GOV_KEYSTORE_PASSWORD}"

  certFile = "logingov.crt"

  pkcs12File = "logingov.pkcs12"
  pkcs12Password = "${project.envVars.LOGIN_GOV_KEYSTORE_PASSWORD}"

  jksFile = "${project.keystoreFile}"
  jksPassword = "${project.envVars.LOGIN_GOV_KEYSTORE_PASSWORD}"
  alias = "${project.envVars.LOGIN_GOV_KEYSTORE_ALIAS}"
}

// Integration Test Build References:
// http://griffon-framework.org/tutorials/6_minimalistic_build.html
// https://spin.atomicobject.com/2018/07/18/gradle-integration-tests/
configurations {
  // fix for vulnerability warning
  compile.exclude module: 'tomcat-annotations-api', group: 'org.apache.tomcat'

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
  integrationTest {
    compileClasspath += sourceSets.main.output + sourceSets.test.output
    runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    groovy.srcDir file('src/integrationTest/groovy')
    resources.srcDir file('src/integrationTest/resources')
  }
}

task integrationTest(type: Test) {
  dependsOn { jks }

  doFirst {
    // `CI` env var is typically "true" inside CircleCI, Travis, and other CI environments.
    // If you find it is not, the build cmds used within your CI config could also be prefixed like:
    // `export CI=true && ./gradlew integrationTest ...`
    Boolean ci = Boolean.valueOf(System.getenv('CI'))
    if(ci) {
      // the 'ci' profile disables creating runtime testcontainers (docker containers)
      // in favor of an assumed background elasticsearch
      systemProperty 'spring.profiles.include', 'ci'
      // the elasticsearch brought up by CircleCI (see `.circleci/config`) runs on localhost:9200
      // which is important when the `DefaultApplicationConfig` for both search/admin APIs connect via ES RestClient
      systemProperty 'elasticsearch.host', 'localhost'
      systemProperty 'elasticsearch.port', '9200'
    }
  }

  description = 'Runs the integration tests'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  outputs.upToDateWhen { false }
  shouldRunAfter test

  reports.junitXml.destination = file("${buildDir}/integration-test-results")
  reports.html.destination = file("${buildDir}/reports/integrationTests")
  environment project.envVars as Map<String, ?>
}
check.dependsOn integrationTest

bootJar {
  from("${buildDir}/resources/main") {
    include "onestop-request-schema.json"
    into "WEB-INF/classes"
  }
  classifier = 'all' // add a classifier to distinguish the executable jar
  archiveBaseName = "${rootProject.name}-${project.name}"
  launchScript()
}

// these environment variables would normally be set by kubernetes objects;
// however, this is problematic running via gradle tasks (build, test, bootRun...) -- where these environment
// variables are not set and can require different values (e.g. - keystore path/file)
//task environmentVariables(type: Exec) {
bootRun {
  environment['server.port'] = '8097'
  environment['elasticsearch.host'] = 'localhost'
  environment['elasticsearch.ssl.enabled'] = 'false'
  environment project.envVars as Map<String, ?>
}

test {
  environment project.envVars as Map<String, ?>
}

processResources {
  def Versions = project.Versions
  def publish = project.publish

  outputs.upToDateWhen { false }
  filesMatching("**/application*.yml") {
    expand([
        esVersion: Versions.ELASTIC,
        version  : publish.version.toString(),
        buildDate: publish.created.toString(),
    ])
  }
}

jib {
  use(PublishingKt) {
    def publish = project.publish

    from {
      // base image
      image = 'gcr.io/distroless/java:11'
    }
    to {
      image = publish.repository()
      auth {
        username = publish.username
        password = publish.password
      }
    }
    container {
      creationTime = publish.created.toString()
      labels = publish.ociAnnotations()
      ports = ['8080']
    }
  }
}
